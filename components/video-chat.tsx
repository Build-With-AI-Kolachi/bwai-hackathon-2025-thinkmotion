"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Avatar } from "@/components/ui/avatar"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Send, Bot, User, ChevronDown, ChevronUp, Lightbulb } from "lucide-react"
import { Badge } from "@/components/ui/badge"

interface Message {
  id: string
  content: string
  sender: "user" | "ai"
  timestamp: Date
}

interface VideoTimestamp {
  time: string
  label: string
}

export default function VideoChat() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      content: "Hello! I'm your math assistant. Ask me anything about Fourier transforms or this video.",
      sender: "ai",
      timestamp: new Date(),
    },
  ])
  const [inputValue, setInputValue] = useState("")
  const [isExpanded, setIsExpanded] = useState(true)
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // Sample video timestamps for concept navigation
  const timestamps: VideoTimestamp[] = [
    { time: "0:15", label: "Introduction to Fourier Transforms" },
    { time: "1:23", label: "Breaking down signals into sine waves" },
    { time: "2:47", label: "Circular motion representation" },
    { time: "3:52", label: "Practical applications" },
  ]

  // Sample suggested questions
  const suggestedQuestions = [
    "What is the mathematical formula for a Fourier transform?",
    "How are Fourier transforms used in the real world?",
    "Can you explain the circular motion visualization?",
    "What's the difference between DFT and FFT?",
  ]

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputValue,
      sender: "user",
      timestamp: new Date(),
    }
    setMessages((prev) => [...prev, userMessage])
    setInputValue("")
    setIsLoading(true)

    // Simulate AI response (would connect to actual AI in production)
    setTimeout(() => {
      let responseContent = ""

      // Simple pattern matching for demo purposes
      if (inputValue.toLowerCase().includes("formula") || inputValue.toLowerCase().includes("equation")) {
        responseContent = `The Fourier transform of a function f(x) is defined as:

F(ω) = ∫_{-∞}^{∞} f(x)e^{-iωx} dx

Where:
- F(ω) is the Fourier transform
- f(x) is the original function
- e^{-iωx} is the complex exponential
- ω represents the angular frequency

This transform converts a function from the time or space domain to the frequency domain.`
      } else if (inputValue.toLowerCase().includes("real world") || inputValue.toLowerCase().includes("application")) {
        responseContent = `Fourier transforms have numerous real-world applications:

1. **Signal Processing**: Filtering noise from signals, audio compression (MP3)
2. **Image Processing**: JPEG compression, image filtering and enhancement
3. **Communications**: Modulation and demodulation in wireless systems
4. **Medical Imaging**: MRI and CT scan image reconstruction
5. **Quantum Physics**: Analyzing wave functions
6. **Optics**: Analyzing diffraction patterns

The video demonstrates how complex signals can be broken down into simpler components, which is the fundamental principle behind these applications.`
      } else if (inputValue.toLowerCase().includes("circular") || inputValue.toLowerCase().includes("motion")) {
        responseContent = `The circular motion visualization (shown at 2:47 in the video) represents how sine waves can be generated by tracking a point moving around a circle.

When you project the position of a point moving uniformly around a circle onto a straight line, you get a sine wave. This is a powerful way to visualize how Fourier transforms work - they essentially break down complex signals into a series of these circular motions of different frequencies and amplitudes.

The video shows multiple circles with points rotating at different frequencies, which corresponds to the different frequency components in the Fourier transform.`
      } else {
        responseContent = `Great question about Fourier transforms! 

The video explains how any complex signal can be broken down into a sum of simple sine waves of different frequencies. This is the core idea behind Fourier analysis.

Each sine wave corresponds to a specific frequency component in the original signal. The Fourier transform tells us the amplitude and phase of each frequency component.

Is there a specific part of this concept you'd like me to elaborate on?`
      }

      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: responseContent,
        sender: "ai",
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, aiMessage])
      setIsLoading(false)
    }, 1500)
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  // Auto-scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  return (
    <div
      className={`bg-gray-800/50 backdrop-blur-sm border border-gray-700 rounded-xl overflow-hidden transition-all duration-300 ${
        isExpanded ? "h-[600px]" : "h-16"
      }`}
    >
      {/* Header */}
      <div
        className="bg-gradient-to-r from-blue-900 to-purple-900 p-4 flex items-center justify-between cursor-pointer"
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <div className="flex items-center">
          <Bot className="h-5 w-5 mr-2 text-blue-200" />
          <h3 className="font-bold text-white">Math Concept Assistant</h3>
          <Badge className="ml-2 bg-blue-500/30 text-blue-200 border-blue-400">AI Powered</Badge>
        </div>
        <Button variant="ghost" size="icon" className="text-white hover:bg-blue-800/50">
          {isExpanded ? <ChevronDown className="h-5 w-5" /> : <ChevronUp className="h-5 w-5" />}
        </Button>
      </div>

      {isExpanded && (
        <>
          <div className="grid grid-cols-1 lg:grid-cols-4 h-[calc(100%-64px)]">
            {/* Main chat area */}
            <div className="lg:col-span-3 flex flex-col h-full">
              {/* Messages */}
              <ScrollArea className="flex-grow p-4">
                <div className="space-y-4">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}
                    >
                      <div
                        className={`flex max-w-[80%] ${message.sender === "user" ? "flex-row-reverse" : "flex-row"}`}
                      >
                        <Avatar className={`h-8 w-8 ${message.sender === "user" ? "ml-2" : "mr-2"}`}>
                          {message.sender === "user" ? (
                            <User className="h-5 w-5 text-gray-300" />
                          ) : (
                            <Bot className="h-5 w-5 text-blue-300" />
                          )}
                        </Avatar>
                        <div
                          className={`rounded-lg p-3 ${
                            message.sender === "user"
                              ? "bg-blue-600 text-white"
                              : "bg-gray-700 text-gray-100 border border-gray-600"
                          }`}
                        >
                          <div className="whitespace-pre-line">{message.content}</div>
                          <div
                            className={`text-xs mt-1 ${message.sender === "user" ? "text-blue-200" : "text-gray-400"}`}
                          >
                            {message.timestamp.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  {isLoading && (
                    <div className="flex justify-start">
                      <div className="flex flex-row">
                        <Avatar className="h-8 w-8 mr-2">
                          <Bot className="h-5 w-5 text-blue-300" />
                        </Avatar>
                        <div className="bg-gray-700 text-gray-100 rounded-lg p-3 border border-gray-600">
                          <div className="flex space-x-2">
                            <div className="h-2 w-2 bg-blue-400 rounded-full animate-bounce"></div>
                            <div className="h-2 w-2 bg-blue-400 rounded-full animate-bounce delay-75"></div>
                            <div className="h-2 w-2 bg-blue-400 rounded-full animate-bounce delay-150"></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  <div ref={messagesEndRef} />
                </div>
              </ScrollArea>

              {/* Input area */}
              <div className="p-4 border-t border-gray-700">
                <div className="flex space-x-2">
                  <Input
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyDown={handleKeyDown}
                    placeholder="Ask about any concept in the video..."
                    className="bg-gray-700 border-gray-600 text-white"
                  />
                  <Button
                    onClick={handleSendMessage}
                    disabled={!inputValue.trim() || isLoading}
                    className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700"
                  >
                    <Send className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </div>

            {/* Sidebar */}
            <div className="hidden lg:block border-l border-gray-700 p-4 overflow-y-auto">
              {/* Video timestamps */}
              <div className="mb-6">
                <h4 className="text-sm font-medium text-gray-300 mb-2 flex items-center">
                  <Clock className="h-4 w-4 mr-1" /> KEY MOMENTS
                </h4>
                <div className="space-y-2">
                  {timestamps.map((timestamp, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      size="sm"
                      className="w-full justify-start border-gray-700 text-gray-300 hover:bg-gray-700 text-xs"
                    >
                      <span className="bg-gray-700 px-1.5 py-0.5 rounded mr-2 text-blue-300">{timestamp.time}</span>
                      <span className="truncate">{timestamp.label}</span>
                    </Button>
                  ))}
                </div>
              </div>

              {/* Suggested questions */}
              <div>
                <h4 className="text-sm font-medium text-gray-300 mb-2 flex items-center">
                  <Lightbulb className="h-4 w-4 mr-1" /> SUGGESTED QUESTIONS
                </h4>
                <div className="space-y-2">
                  {suggestedQuestions.map((question, index) => (
                    <Button
                      key={index}
                      variant="ghost"
                      size="sm"
                      className="w-full justify-start text-left text-gray-300 hover:bg-gray-700 text-xs"
                      onClick={() => {
                        setInputValue(question)
                      }}
                    >
                      {question}
                    </Button>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  )
}

import { Clock } from "lucide-react"
